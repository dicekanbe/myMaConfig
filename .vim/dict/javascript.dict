abs: Math.abs() 関数は、数値の絶対値を返します。すなわち、
acos: Math.acos() 関数は引数として与えた数値のアークコサインをラジアン単位で返します。
acosh: Math.acosh() 関数は、数値のハイパーボリックアークコサインを返します。すなわち
add: 静的な Atomics.add() メソッドは、配列内の指定した位置に値を追加して、その場所の古い値を返します。この atomic 操作は、修正された値が書き戻されるまで、他の書き込みが起こらないことを保証します。
add: 新しいオブジェクトをWeakSetオブジェクトの最後に追加します。
add: 特定のvalueをもつ新しい要素をSetオブジェクトの最後に追加します。
all: Promise.all(iterable) メソッドは単一の Promise を返し、これは引数 iterable の中のすべての Promise が解決されるか、引数 iterable の中に Promise がない場合に解決されます。最初に拒否された Promise の拒否理由をもって拒否されます。
apply: apply() メソッドは与えられた this 参照値と、配列 (もしくは配列風のオブジェクト) の形で与えられた引数を用いて関数を呼び出します。
apply: handler.apply() メソッドは関数呼び出しに対するトラップです。
apply: 静的なReflect.apply()メソッドは、指定された引数とともに対象となる関数を呼び出します。
assign: Object.assign() メソッドは、すべての列挙可能なプロパティの値を1つ以上のソースオブジェクトからターゲットオブジェクトにコピーするために使用されます。戻り値としてターゲットオブジェクトを返します。
atanh: Math.atanh() 関数は、数値のハイパーボリックアークタンジェントを返します。すなわち
bold: bold() メソッドは、文字列を太字で表示する ) は、要素の内容に読者の注意を惹きたい場合で、他の特別な重要性が与えられないものに使用します。<b> 要素を生成します。
call: call() メソッドは、 this の値と、独立して提供された引数によって関数を呼び出します。
catch: catch() メソッドは Promise を返します。失敗した場合のみ扱います。 Promise.prototype.then(undefined, onRejected) が呼ばれたときと同様に振る舞います。
cbrt: Math.cbrt() 関数は、引数として与えた数の立方根を返します。すなわち、
ceil: Math.ceil() 関数は、引数として与えた数以上の最小の整数を返します。
charAt: UTF-16 単位で指定された位置にあるコードの値を取りだし、その値のみで構成された新しい文字列を返します。
charCodeAt: charCodeAt() メソッドは、与えられたインデックスに位置する文字の UTF-16 コードを表す 0 から 65535 の整数を返します（UTF-16 コードユニットは、単一の UTF-16 コードユニットで表現可能なコードポイントの Unicode コードポイントと一致しますが、単一の UTF-16 コードユニットでは表現できないコードポイントのサロゲートペアの最初のコードユニットでもあります。 例えば Unicodeコードポイント> 0x10000）。コードポイント値全体を取得したいなら、codePointAt() を使用してください。
clear: Mapオブジェクトからすべての要素を削除します。
clear: WeakSetオブジェクトからすべての要素を削除します。
clear: clear() メソッドは、WeakMap オブジェクトからすべての要素を削除するために使用されていましたが、もはや ECMAScript とその実装に含まれていません。
clear: Setオブジェクトからすべての要素を取り除きます。
clz32: Math.clz32() 関数は、引数として与えられた数値の 32 ビットバイナリ表現での先頭の 0 の個数を返します。
codePointAt: codePointAt() メソッドは、Unicode ポイント値である負でない整数を返します。
compile: 非推奨の compile() メソッドはスクリプトの実行中に正規表現を(再)コンパイルするために使われます。RegExpコンストラクタと基本的に同じです。
construct: Reflect.construct() 静的メソッドは、機能として new 演算子のように働きます。これは、new target(...args) の呼び出しと同等です。このメソッドはオプションを追加することで、prototype を変更します。
construct: new 操作に対するトラップです。
copyWithin: 配列内の一連の配列の要素をtargetで開始する位置にコピーします。第二、第三の引数、startとendのインデックス位置からコピーが実施されます。end 引数はオプションです。デフォルトは配列のサイズになっています。このメソッドはArray.prototype.copyWithinと同じアルゴリズムです。TypedArrayはtyped array typesの一つです。
copyWithin: copyWithin() メソッドは、配列内の配列要素の並びを target で始まる位置にコピーします。このコピーは、2, 3 番目の引数である start と end に指定したインデックス位置から取られます。end 引数の指定は任意であり、デフォルトで配列の長さ (最後尾) になります。
cosh: 引数として与えた数のハイパーボリックコサインを返します。constant eを使用して表現されます。:
defineProperties: Object.defineProperties() メソッドは、オブジェクトに直接新しいプロパティを定義し、あるいは既存のプロパティを変更して、そのオブジェクトを返します。
defineProperty: handler.defineProperty() は Object.defineProperty() に対するトラップです。
defineProperty: 静的なReflect.defineProperty()メソッドは、Object.defineProperty()と似ていますが、Booleanを返します。
delete: Mapオブジェクトから特定の要素を削除します。
delete: Setオブジェクトから特定の要素を取り除きます。
delete: delete() メソッドは、WeakMap オブジェクトから指定された要素を削除します。
delete: WeakSetオブジェクトから指定された要素を削除します。
deleteProperty: delete 操作に対するトラップです。
deleteProperty: 静的な Reflect.deleteProperty()  メソッドは、プロパティを削除します。機能としては delete 演算子のようなものです。
endsWith: endsWith() メソッドは、対象の文字列が引数に指定された別の文字列を末尾に持つ文字列であるか否かを示す真偽値を返します。
entries: entries() メソッドは、配列内の各要素に対する key/value ペアを含む新しい Array Iterator オブジェクトを取得します。
entries: 配列内の各インデックスに対するkey/valueペアを含む新しいArray Iteratorオブジェクトを返します。
entries: Object.entries() メソッドは、引数に与えたオブジェクトが所有する、列挙可能なプロパティの組 [key, value] からなる配列を返します。配列要素の順序は for...in ループによる順序と同じです (両者の違いとして、for-in ループではその上プロトタイプチェーン内のプロパティも列挙されます)。 Object.entries() で返される配列の順序は、オブジェクトがどのように定義されたかに依存しません。特定の順序にする必要があるのであれば、 Object.entries(obj).sort((a, b) => a[0] - b[0]); のようにして、まず配列を整列する必要があります。
entries: 挿入順でMapオブジェクトの要素に対する[key, value]ペアを含む新しい Iterator オブジェクトを返します。
entries: Setオブジェクトの各要素に挿入順に[value, value]の配列を含む新しいIterator オブジェクトを返します。Set オブジェクトに対して、Mapオブジェクトのようなkeyはありません。しかしながら、Mapオブジェクトと似たAPIをもつために、各entryはkeyとvalueに対して同じ値を持ちます。そのため、配列[value, value]が返されます。
enumerate: handler.enumerate() メソッドは for...in ステートメントのトラップにするために使用されていましたが、 ES2016 で ECMAScript 標準から削除され、ブラウザーで非推奨になりました。
enumerate: 静的な Reflect.enumerate() メソッドは、対象オブジェクトの可算できる自身と継承されたプロパティを持つイテレータを返します。
every: typed array内のすべての要素が提供された関数によって実装されたテストを渡すかどうかテストします。このメソッドはArray.prototype.every()と同じアルゴリズムです。TypedArrayはtyped array typesの一つです、
expm1: ex - 1　を返します。x　は引数で、e は自然対数の底です。
exports: WebAssembly.exports() 関数は指定した Module のエクスポート宣言の定義の配列を返します。
fill: fill()メソッドは、typed array中の開始インデックスから終了インデックスまでの全ての要素を固定値で設定します。このメソッドのアルゴリズムはArray.prototype.fill()と同じです。ここで、TypedArrayはtyped array typesのいずれかを指します。
fill: fill() メソッドは、配列中の開始位置から終了位置までの要素を固定値で設定します。その際、終了位置は含まれません。
filter: 提供された関数によって実装されるテストを渡すすべての要素で新しいtyped arrayを生成します。このメソッドはArray.prototype.filter()と同じアルゴリズムを持っています。TypedArrayはここではtyped array typesの一つです。
filter: 引数として与えられたテスト関数を各配列要素に対して実行し、それに合格したすべての配列要素からなる新しい配列を生成します。
finally: finally() メソッドは、Promise を返します。成功・失敗にかかわらず、promise が確立したら指定したコールバック関数が実行されます。これにより、promise が成功裏に実行されたか否かに関わりなく、Promise が処理された後に実行されなければならないコードを提供できます。
find: 配列の要素に指定されたテスト関数を適用していき、テストを満たす最初の要素の 値 を返します。見付からない場合は undefined を返します。
find: 要素は、与えられたテスト関数を満たした場合、typed arrayのvalueを返します。さもなければ、undefinedが返されます。TypedArrayはここではtyped array typesの一つです。
findIndex: findIndex() メソッドは、配列内の要素が指定されたテスト関数を満たす場合、配列内の インデックス を返します。そうでない場合は -1 を返します。
findIndex: typed array内の要素が与えられたテスト関数を満たすなら、typed array内のインデックスを返します。さもなければ、-1が返されます。
flat: flat() メソッドは、すべてのサブ配列要素を指定した深さで再帰的に結合した新しい配列を生成します。
flatMap: flatMap() メソッドは、最初にマッピング関数を使用してそれぞれの要素をマップした後、結果を新しい配列内にフラット化します。これは深さ 1 の flatten が続く map と同じですが、flatMap はしばしば有用であり、2 つのメソッドを 1 つにマージするよりもやや効果的です。
for: 引数で与えられたキーでランタイム全体のシンボルレジストリ内に存在しているシンボルを検索し、見つかった場合それを返します。さもなければ、新しいシンボルがこのキーでグローバルシンボルレジストリ内に生成されます。
forEach: Mapのキー／バリューペアに対して一回ずつ、挿入順に指定された関数を実行します。
forEach: Setオブジェクトの各値に対して一度挿入順で与えられた関数を実行します。
forEach: 配列の要素ごとに一度与えられた関数を実行します。このメソッドはArray.prototype.forEach()と同じアルゴリズムを持っています。TypedArrayはここではtyped array typesの一つです。
formatToParts: Intl.DateTimeFormat.prototype.formatToParts() メソッドは、DateTimeFormat フォーマットによって生成されるロケール対応書式を設定可能にします
from: Array.from() メソッドは、配列風オブジェクトや反復可能オブジェクトから、新しい、浅いコピーの Array インスタンスを生成します。
from: 配列オブジェクトや反復オブジェクトから新しいtyped arrayを返します。このメソッドはArray.from()とほぼ同じです。
fromCodePoint: 静的なString.fromCodePoint() メソッドはコードポイントの指定されたシーケンスを使用することによって生成された文字列を返します。
fromEntries: Object.fromEntries() メソッドは、キーと値の組み合わせのリストをオブジェクトに変換します。
fround: 引数として与えた数の最も近い単精度 floatを返します。
get: get() メソッドは、WeakMap オブジェクトから指定された要素を返します。
get: 静的な Reflect.get() メソッドは、機能としてオブジェクトからプロパティを取得する（target[propertyKey])）かのように動作します。
get: handler.get() はプロパティの値を取得することに対するトラップです。
get: get() メソッドは Map オブジェクトから特定の要素を返します。
get ArrayBuffer[@@species]: ArrayBuffer[@@species] アクセッサプロパティは、ArrayBuffer コンストラクタを返します。
get Array[@@species]: Array[@@species] アクセッサプロパティは、Array コンストラクタを返します。
getCanonicalLocales: Intl.getCanonicalLocales() メソッドは、標準ロケール名を含む配列を返します。重複は省略され、要素は構造的に有効な言語タグか検証されます。
getDate: getDate() メソッドは、地方時に基づき、指定された日付の「日」を返します。
getDay: getDay() メソッドは、地方時に基づき、指定された日付の「曜日」を返します。0 は日曜日を表します。「日」を取得する方法は getDate() をご覧ください。
getFloat32: DataViewの開始位置から特定のバイトオフセットで符号付き32-bit float (float) を取得します。
getFloat64: DataViewの開始位置から特定のバイトオフセットで符号付き 64-bit float (double) を取得します。
getFullYear: getFullYear() メソッドは、地方時に基づき、指定された日時の「年」を返します。
getHours: getHours() メソッドは、地方時に基づき、指定された日時の「時」を返します。
getInt16: DataViewの開始位置から特定のバイトオフセットで符号付き16-bit integer (short)を取得します。
getInt32: DataViewの開始位置から特定のバイトオフセットで符号付き32-bit integer (long)を取得します。
getInt8: DataViewの開始位置から特定のバイトオフセットで符号付き8-bit integer (byte) を取得します。
getMilliseconds: getMilliseconds() メソッドは、ローカル時間に基づき、指定された日時の「ミリ秒」を返します。
getMinutes: getMinutes() メソッドは、地方時に基づき、指定された日時の「分」を返します。
getMonth: getMonth() メソッドは、地方時に基づき、指定された日付の「月」を表す 0 を基点とした値を返します。
getNotifier: Object.getNotifer() メソッドは総合的に変更をトリガーできるオブジェクトの生成に使用されます。
getOwnPropertyDescriptor: handler.getOwnPropertyDescriptor() は Object.getOwnPropertyDescriptor() に対するトラップです。
getOwnPropertyDescriptor: 静的な Reflect.getOwnPropertyDescriptor() メソッドは、Object.getOwnPropertyDescriptor() と似ています。オブジェクトにプロパティが存在する場合、与えられたプロパティのプロパティディスクリプタを返します。一方、プロパティが存在しない場合は、undefined を返します。
getOwnPropertyDescriptors: Object.getOwnPropertyDescriptors() メソッドは、指定したオブジェクトのすべてのプロパティディスクリプターを返します。
getOwnPropertySymbols: 引数で与えられたオブジェクト上で直接見つかったすべてのsymbolプロパティの配列を返します。
getPrototypeOf: 次の引数は getPrototypeOf メソッドに渡されます。this はハンドラにバインドされます。
getSeconds: getSeconds() メソッドは、地方時に基づき、指定した日時の「秒」を返します。
getTime: getTime() メソッドは、協定世界時に基づいて、指定された日時に対応する数値を返します。
getTimezoneOffset: getTimezoneOffset() メソッドは、（ホストシステム上における）現在のロケールから協定世界時 (UTC) までのタイムゾーンの差を分単位で返します。
getUTCDate: getUTCDate() は、協定世界時に基づき、指定された日付の「日」を返します。
getUTCDay: getUTCDay() メソッドは、協定世界時に基づき、指定された日時の「曜日」を返します。0 は日曜日を表します。
getUTCFullYear: getUTCFullYear() メソッドは、協定世界時に基づき、指定された日付の「年」を返します。
getUTCHours: getUTCHours() メソッドは、協定世界時に基づき、指定された日時の「時」を返します。
getUTCMilliseconds: getUTCMilliseconds() メソッドは、協定世界時に基づき、指定された日時の「ミリ秒」を返します。
getUTCMinutes: getUTCMinutes() メソッドは、協定世界時に基づき、指定された日時の「分」を返します。
getUTCMonth: getUTCMonth() メソッドは、協定世界時に基づき、指定された日付の「月」を返します。値は 0 を基点とします (0 は 1 月、1 は 2 月)。
getUTCSeconds: getUTCSeconds() メソッドは、協定世界時に基づき、指定された日時の「秒」を返します。
getUint16: DataViewの開始位置から特定のバイトオフセットで符号なし 16-bit integer (unsigned short) を取得します。
getUint32: DataViewの開始位置から特定のバイトオフセットで符号なし32-bit integer (unsigned long)を取得します。
getUint8: DataViewの開始位置から特定のバイトオフセットで符号なし8-bit integer (unsigned byte) を取得します。
getYear: getYear() メソッドは、地方時に基づき、指定された日付の「年」を返します。getYear() は完全な桁数の値を返さないため (いわゆる 2000 年問題)、使用されなくなり、getFullYear() メソッドに置き換えられました。
has: has() メソッドは特定のキーに対する要素が存在するかどうかを示す boolean を返します。
has: handler.has() は in 演算子に対するトラップです。
has: 静的な Reflect.has() メソッドは、機能としては in 演算子 のように動作します。
has: 特定の値をもつ要素がSetオブジェクト内に存在するかどうかを示すbooleanを返します。
has: has() メソッドは、WeakMap オブジェクト内に指定されたキーをもつ要素が存在しているかどうかを示す真偽値を返します。
has: WeakSetオブジェクト内にオブジェクトが存在しているかどうかを示すbooleanを返します。
hypot: 引数の二乗和の平方根を返します。すなわち
includes: includes() メソッドは typed array がある要素を含むかどうか判断し、その結果に応じて true か false を返します。このメソッドは Array.prototype.includes() と同じアルゴリズムを持ちます。TypedArray はここでは typed array types の一つです。
includes: includes() メソッドは、1 つの文字列を別の文字列の中に見出すことができるかどうかを判断し、必要に応じて true か false を返します。
includes: includes() メソッドは、特定の要素が配列に含まれているかどうかを true または false で返します。 与えられた要素が見つかるかどうかを計算するために、SameValueZero(ゼロの同値)アルゴリズムを使用します。
indexOf: indexOf() メソッドは引数に与えられた内容と同じ内容を持つ配列要素の内、最初のものの添字を返します。存在しない場合は -1 を返します。
indexOf: 引数で与えられた要素がtyped array内で見つけられた最初のインデックスを返します。または、存在しない場合は、-1を返します。このメソッドはArray.prototype.indexOf()と同じアルゴリズムを持ちます。TypedArrayはここではtyped array typesの一つです。
indexOf: indexOf() メソッドは、呼び出す String オブジェクト中で、 fromIndex から検索を始め、指定された値が最初に現れたインデックスを返します。値が見つからない場合は -1 を返します。
instantiate: WebAssembly.instantiate() 関数は WebAssembly コードをコンパイルおよびインスタンス化することができます。この関数は2つのオーバーロードを持ちます。
is: Object.is() メソッドは 2 つの値の同一性を判定します。
isArray: Array.isArray() メソッドは、渡された値が Array かどうかを判断します。
isExtensible: handler.isExtensible() は Object.isExtensible()に対するトラップです。
isExtensible: 静的な Reflect.isExtensible() メソッドは 、オブジェクトを拡張できるかを測定します（オブジェクトに追加された新しいプロパティを持てるかどうか）。これは Object.isExtensible() に似ていますが、いくつかの 違いがあります。
isFinite: Number.isFinite() メソッドは、引数として与えた数が有限数かどうかの真偽値を返します。
isGenerator: 非標準の isGenerator() メソッドは、関数が ジェネレーター であるか否かを示す真偽値を取得します。これは、Firefox 58 で削除しました。
isInteger: Number.isInteger() は引数に指定された値が整数かどうかを判定するメソッドです。
isNaN: 引数として与えた数がNaNであり、且つNumber型かどうかの真偽値を返します。 オリジナルのisNaN()グローバル関数より堅牢なバージョンです。
isSafeInteger: Number.isSafeInteger() メソッドは、引数として与えた数が safe integer かどうかの真偽値を返します。safe integer は下記を満たす整数です。
isView: argが、typed array objectsやDataViewのように、ArrayBufferのビューの場合、trueを返します。 さもなければ、false を返します。
italics: italics() メソッドは、文字列を  要素は、何らかの理由で他のテキストと区別されるテキストの範囲を表します。例えば、技術用語、外国語のフレーズ、架空の人物の思考などです。英文においてはよく斜体で表示されるものです。">i タグで囲んだときのように、斜体 (italic) で表示させます。
join: join() メソッドは、配列 (または配列風オブジェクト) の全要素を順に連結した文字列を新たに作成して返します。区切り文字はカンマ、または指定された文字列です。
join: 配列のすべての要素を文字列に結合します。このメソッドはArray.prototype.join()と同じアルゴリズムを持ちます。TypedArrayはここではtyped array typesの一つです。
keyFor: 引数で与えられたシンボルに対してグローバルシンボルレジストリから共有シンボルキーを取得します。
keys: keys() メソッドは、配列の各インデックスのキーを含む新しい Arrayイテレーター オブジェクトを返します。
keys: 挿入順にMapオブジェクトの要素のキーを含む新しいIteratorオブジェクトを返します。
keys: Object.keys() メソッドは、指定されたオブジェクトが持つ names プロパティの配列を、通常のループで取得するのと同じ順序で返します。
keys: 配列内の各インデックスに対するキーを含む新しいArray Iteratorオブジェクトを返します。
lastIndexOf: lastIndexOf() メソッドは配列中で与えられた要素が見つけられた最後の添字を返します。もし存在しなければ -1 を返します。配列は fromIndex から逆向きに検索されます。
lastIndexOf: lastIndexOf() メソッドは、呼び出す String オブジェクト中で、fromIndex から逆方向に検索し、指定された値が最後に現れるインデックスを返します。値が見つけられない場合、-1 を返します。
lastIndexOf: 引数で与えられた要素がtyped array内で最後に現れるインデックスを返します。値が見つからない場合、-1を返します。typed arrayはfromIndexで始まる位置から逆方向に検索されます。 このメソッドは、Array.prototype.lastIndexOf()と同じアルゴリズムを持ちます。TypedArrayはここではtyped array typesの一つです。
localeCompare: localeCompare() メソッドは参照文字列がソート順で引数で与えられた文字列と大なり、小なり、等しいとなるかどうかを示す数値を返します。
log: Math.log() 関数は、引数として与えた数の自然対数 (底は e) を返します。つまり、次のような説明になります。
log10: Math.log10() 関数は、引数として与えた数に対して、10 を底とする対数を返します。すなわち、
log1p: 引数として与えた数と 1 の合計の自然対数(底 e)を返します。すなわち
log2: 引数として与えた数の2を底とする対数を返します。すなわち
map: map() メソッドは、与えられた関数を配列のすべての要素に対して呼び出し、その結果からなる新しい配列を生成します。
map: typed array内のすべての要素で与えられた関数を呼び出した結果をもつ新しいtyped arrayを生成します。このメソッドはArray.prototype.map()と同じアルゴリズムを持ちます。TypedArrayは、ここではtyped array typesの一つです。
min: Math.min() 静的関数は、引数に渡される最小の値、または引数のいずれかに数値以外があり、 1 に変換できない場合は NaN を返します。
move: 配列内の一連の要素をtargetで始まる位置にコピーします。しかしながら、この非標準のメソッドは標準のTypedArray.prototype.copyWithin() メソッドに置き換えられました。 TypedArrayはここではtyped array typesの一つです。
next: doneとvalueの２つのプロパティを持ったオブジェクトを返します。 ジェネレータに値を送るためにnextメソッドに引数が提供されております。
normalize: normalize() メソッドは、引数で与えられた文字列(その値が文字列でない場合、最初の文字列に変換されます)の Unicode 正規化形式を返します。
now: Date.now() メソッドは、UTC (協定世界時) での 1970 年 1 月 1 日 0 時 0 分 0 秒 から現在までの経過時間をミリ秒単位で返します。
observe: Array.observe() メソッドは、配列への変更を非同期で監視するために使用されました。オブジェクト用の Object.observe() と似ています。変更内容は、発生した順番に時系列で提供されます。accept type list ["add", "update", "delete", "splice"] で呼び出された Object.observe() と同等です。しかしながら、この API の使用は非推奨となり、ブラウザから削除されています。代わりに、一般的な Proxy オブジェクトを使用してください。
observe: Object.observe() メソッドは、オブジェクトの変更を非同期で監視するために使用されました。このメソッドは、発生順に並んだ一連の変更の流れを提供します。このメソッドによって発生順に一連の変更内容が生成されます。しかしながら、この API の使用は非推奨となり、ブラウザから削除されています。代わりに、一般的な Proxy オブジェクトを使用してください。
of: Array.of() メソッドは、引数の数や型にかかわらず、可変長引数で、新しい Array インスタンスを生成します。
of: 様々な数の引数をもつ新しいtyped arrayを生成します。このメソッドはArray.of()とほぼ同じです。
ownKeys: Object.getOwnPropertyNames()に対するトラップです。
ownKeys: 静的な Reflect.ownKeys() メソッドは、対象のオブジェクトが持つプロパティキーの配列を返します。
padEnd: padEnd() メソッドは、最終的な文字列が指定された長さに到達するように、現在の文字列を指定した文字列で（繰り返し）延長します。延長は、現在の文字列の終端（右）から適用されます。
padStart: padStart() メソッドは、指定した長さに文字列がなるように、現在の文字列を指定した文字列で (必要があれば繰り返し) 延長します。延長は、現在の文字列の最初 (左) から適用されます。
parse: Date.parse() メソッドは、日時を表す文字列を解釈し、協定世界時 (UTC) 1970 年 1 月 1 日 00:00:00 からの経過時間を表すミリ秒単位の数値を返します。または、文字列を解釈できなかったり不正な日付 (例えば 2015-02-31) が指定された場合 NaN を返します。
parse: JSON.parse() メソッドは文字列を JSON として解析し、文字列によって記述されている JavaScript の値やオブジェクトを構築します。任意の reviver 関数で、生成されたオブジェクトが返される前に変換を実行することができます。
parseFloat: Number.parseFloat() メソッドは、文字列引数をパースし浮動小数点数を返します。このメソッドはグローバル関数 parseFloat() と同様に振る舞い、ECMAScript 第 6 版の一部となっています(目的はグローバル関数のモジュール化です)。
parseInt: 文字列引数をパースし指定された基数または底の整数値を返します。
pop: pop() メソッドは、配列から最後の要素を取り除き、その要素を返します。このメソッドは配列の長さを変化させます。
preventExtensions: 静的な Reflect.preventExtensions() メソッドは、すでにプロパティが追加されたオブジェクトに、新しいプロパティを抑制します (つまり、オブジェクトのさらなる拡張を抑制します)。Object.preventExtensions() に似ていますが、違いがあります。
preventExtensions: handler.preventExtensions() は Object.preventExtensions()に対するトラップです。
prototype[@@iterator]: @@iteratorプロパティの初期値はvaluesプロパティの初期値と同じ関数オブジェクトです。
prototype[@@iterator]: @@iterator プロパティの初期値はentriesプロパティの初期値と同じ関数オブジェクトです。
prototype[@@iterator]: 文字列値のコードポイントを反復処理し新しいIteratorオブジェクトを返します。文字列値として各コードポイントを返します。
prototype[@@iterator]: @@iterator プロパティの初期値は values() プロパティの初期値と同じ関数オブジェクトです。
prototype[@@iterator]: @@iteratorプロパティの初期値はvaluesのプロパティの初期値と同じ関数オブジェクトです。
prototype[@@match]: [@@match]() メソッドは、文字列と正規表現が一致したマッチを取得します。
prototype[@@replace]: [@@replace]() メソッドは、 replacement によって文字列内の this パターンの一部または、すべての一致を置き換えて、置換結果を新しい文字列として返します。replacement は文字列か関数をすべてのマッチごとに呼び出されるようにできます。
prototype[@@search]: [@@search]() メソッドは、this 正規表現と文字列の間でマッチさせるための検索を実行します。
prototype[@@split]: [@@split]() メソッドは、文字列を部分文字列に区切ることによって、String オブジェクトを文字列の配列に分割します。
prototype[@@toPrimitive]: [@@toPrimitive]() メソッドは、Date オブジェクトをプリミティブ値に変換します。
prototype[@@toPrimitive]: [@@toPrimitive]()メソッドは、Symbol オブジェクトをプリミティブ値に変換します。
push: push() メソッドは、配列の末尾に 1 つ以上の要素を追加することができます。また戻り値として新しい配列の要素数を返します。
race: Promise.race(iterable) 静的メソッドは、引数の Promise iterable のうち、一つが成功もしくは失敗した時に、すぐに値や理由とともに Promise を返します。
random: Math.random()関数は、0–1（0以上、1未満）の範囲で浮動小数点の擬似乱数を返します。その範囲ではほぼ均一な分布で、ユーザーは範囲の拡大をすることができます。実装側で乱数生成アルゴリズムの初期シードを選択し、ユーザーが初期シードを選択、またはリセットすることは出来ません。
raw: 静的メソッドである String.raw() は、文字列リテラルのための Python の r プレフィックスや C# の @ プレフィックスのような template strings のタグ関数です。この関数は、template strings の生の文字列形式を取得するために使用されます。
reduce: アキュムレータに対して関数を適用し、隣り合う二つのtyped arrayの要素(左から右へ)は単一の値になります。このメソッドは、Array.prototype.reduce()と同じアルゴリズムを持っています。TypedArrayは、ここではtyped array typesの一つです。
reduceRight: アキュムレータに対して関数を適用し、隣り合う二つのtyped arrayの要素(右から左へ)は単一の値になります。このメソッドは、Array.prototype.reduceRight()と同じアルゴリズムを持っています。TypedArrayは、ここではtyped array typesの一つです。
reduceRight: reduceRight は、配列に存在するおのおのの要素に対して、callback 関数を一度だけ実行します。配列における穴は対象からはずされ、また callback 関数は、「初期値（あるいは、直前の callback 呼び出し）」、「現在の要素の値」、「現在のインデックス」、「繰り返しが行われる配列」 の 4 つの引数を受け取ります。
reject: 静的なPromise.reject 関数はリジェクトされたPromiseを返します。デバッグのためにキャッチするエラーを選別したい場合は、 reasonをinstanceof Errorにかけると良いでしょう。
resolve: Promise.resolve(value) メソッドは引数で与えられた値で解決される Promise オブジェクトを返します。もし引数の値が Promise なら、引数の Promise がそのまま返されます。もし引数の値が thenable なら (すなわち "then" メソッドを持っている場合)、返される Promise はその thenable を「たどって処理し」、その最終的な状態を採用するものとなります。それ以外では、返される Promise は引数の値で充足されるものとなります。
resolvedOptions: ローケルを反映しているプロパティとこのNumberFormatオブジェクトの初期化中に計算された数値変換オプションをもった新しいオブジェクトを返します。
resolvedOptions: ローケルを反映しているプロパティと、このDateTimeFormatオブジェクトの初期化中に計算されたオプションをフォーマットしている日時をもった新しいオブジェクトを返します。
resolvedOptions: ローケルを反映しているプロパティとCollatorオブジェクトの初期化中に計算された照合オプションをもった新しいオブジェクトを返します。
return: 与えられている値を返し、ジェネレータを終了します。
reverse: typed arrayの位置を反転させます。最初のtyped arrayの要素は最後になり、最後の要素は最初になります。このメソッドはArray.prototype.reverse()と同じアルゴリズムを持ちます。 TypedArrayはここではtyped array types の一つです。
revocable: Proxy.revocable() メソッドを利用すると、取り消し可能な Proxy オブジェクトを作成できます。
round: Math.round() 関数は、引数として与えた数を四捨五入して、もっとも近似の整数を返します。
seal: Object.seal() メソッドは、オブジェクトを封印して、新しいオブジェクトを追加することを抑制し、すべての既存のプロパティを設定変更不可にします。現存するプロパティの値は、書き込み可能である限り変更できます。
set: set() メソッドは、指定された key と value をもつ新しい要素を WeakMap オブジェクトに追加します。
set: 特定のkeyとvalueをもった新しい要素をMapオブジェクトに追加します。
set: set() メソッドは、指定した配列から入力値を読み込み、複数の値を typed array 内に格納します。
set: handler.set() はプロパティの値を設定することに対するトラップです。
set: 静的な Reflect.set() メソッドは、オブジェクトにプロパティを設定するかのように動作します。
setDate: setDate() メソッドは、現在設定されている月から始まる Date オブジェクトの「日」を設定します。
setFloat32: DataViewの開始位置から特定のバイトオフセットで符号付き 32-bit float (float) を設定します。
setFloat64: DataViewの開始位置から特定のバイトオフセットで符号付き 64-bit float (double) を設定します。
setFullYear: setFullYear() メソッドは、地方時に基づき、指定された日付の「年」を設定します。新しいタイムスタンプを返します。
setHours: setHours() メソッドは、地方時に基づき、指定された日付の「時」を設定し、協定世界時 (UTC) 1970 年 1 月 1 日 00:00:00 から更新された Date インスタンスが表す時刻までの間のミリ秒単位の数値を返します。
setInt16: DataViewの開始位置から特定のバイトオフセットで符号付き 16-bit integer (short) を設定します。
setInt32: DataViewの開始位置から特定のバイトオフセットで符号付き 32-bit integer (long) を設定します。
setInt8: DataViewの開始位置から特定のバイトオフセットで符号付き 8-bit integer (byte) を設定します。
setMilliseconds: setMilliseconds() メソッドは、地方時に基づき、指定された日時の「ミリ秒」を設定します。
setMinutes: setMinutes() メソッドは、地方時に基づき、指定された日時の「分」を設定します。
setMonth: setMonth() メソッドは、現在設定されている年に基づき、指定された日付の「月」を設定します。
setPrototypeOf: 静的な Reflect.setPrototypeOf() メソッドは、Object.setPrototypeOf() と同じメソッドです。これは指定されたオブジェクトのプロトタイプ（つまり、内部の [[Prototype]] プロパティ）にほかのオブジェクト、または null を設定します。
setPrototypeOf: 指定されたオブジェクト。
setPrototypeOf: handler.setPrototypeOf() は Object.setPrototypeOf() に対するトラップです。
setSeconds: setSeconds() メソッドは、地方時に基づき、指定された日時の「秒」を設定します。
setTime: setTime() メソッドは、Date オブジェクトを協定世界時 (UTC) 1970 年 1 月 1 日 00:00:00 からの経過時間をミリ秒単位で表す時刻に設定します。
setUTCDate: setUTCDate() メソッドは、協定世界時に基づき、指定された日付の「日」を設定します。
setUTCFullYear: setUTCFullYear() メソッドは、協定世界時に基づき、指定された日付の年を設定します。
setUTCHours: setUTCHours() メソッドは、協定世界時に基づき、指定された日付の「時」を設定し、協定世界時 (UTC) 1970 年 1 月 1 日 00:00:00 から更新された Date インスタンスが表す時刻までの間のミリ秒単位の数値を返します。
setUTCMilliseconds: setUTCMilliseconds() メソッドは、協定世界時に基づき、指定された日時の「ミリ秒」を設定します。
setUTCMinutes: setUTCMinutes() メソッドは、協定世界時に基づき、指定された日時の「分」を設定します。
setUTCMonth: setUTCMonth() メソッドは、協定世界時に基づき、指定された日付の「月」を設定します。
setUTCSeconds: setUTCSeconds() メソッドは、協定世界時に基づき、指定された日時の「秒」を設定します。
setUint16: DataViewの開始位置から特定のバイトオフセットで符号なし 16-bit integer (unsigned short) を設定します。
setUint32: DataViewの開始位置から特定のバイトオフセットで符号なし 32-bit integer (unsigned long) を設定します。
setUint8: DataViewの開始位置から特定のバイトオフセットで符号なし 8-bit integer (byte) を設定します。
setYear: setYear() メソッドは、地方時に基づき、指定された日付の「年」を設定します。 setYear() は完全な桁数の値を設定しないため (いわゆる 2000 年問題)、使用されなくなり、setFullYear() メソッドに置き換えられました。
shift: shift() メソッドは、配列から最初の要素を取り除き、その要素を返します。このメソッドは配列の長さを変えます。
sign: Math.sign() 関数は、引数として与えた数が正、負、0 のどれであるか示す符号を返します。
sinh: 引数として与えた数のハイパーボリックサインを返します。constant eを用いて表現できます。:
slice: slice() メソッドは、文字列の一部分を取り出し、新しい文字列を返します。
slice: typed arrayの一部を取り出して新しいtyped arrayを返します。このメソッドは、Array.prototype.slice()と同じアルゴリズムを持ちます。 TypedArrayは、ここではtyped array typesの一つです。
slice: slice() メソッドは、begin (包括) から end (排他) まで、この ArrayBuffer のバイト単位のコピーされた内容の新しい ArrayBufferを返します。
some: 与えられた関数によって実行されるテストに合格する要素がtyped arrayの中にあるかどうかをテストします。このメソッドは、Array.prototype.some()と同じアルゴリズムを持ちます。TypedArrayはここではtyped array typesの一つです。
sort: sort() メソッドは、TypedArray 内で要素をソートして、その TypedArray を返します。このメソッドのアルゴリズムは Array.prototype.sort() と同じものです。 TypedArray とは TypedArray の型 のどれかを表します。
startsWith: startsWith() メソッドは文字列が引数で指定された文字列で始まるかを判定して true か false を返します。
store: 静的な Atomics.store() メソッドは、配列内の指定した位置に指定した値を保存し、その値を返します。この atomic 操作は、修正した値が書き戻されるまでほかの書き込みが発生しないことを保証します。
stringify: JSON.stringify() メソッドはある JavaScript の値を JSON 文字列に変換します。置き換え関数を指定して値を置き換えたり、置き換え配列を指定して指定されたプロパティのみを含むようにしたりすることができます。
sub: 静的な Atomics.sub() メソッドは、配列内の所定の位置に指定された値を取り除いた上で、その位置にある古い値を返します。この atomic 操作は、修正された値が書き戻されるまで、ほかの書き込みが発生しないことを保証します。
subarray: 同じArrayBufferストアで、TypedArrayオブジェクトと同じ要素の型をもつ新しいTypedArrayを返します。beginオフセットは包括して、endオフセットは排他的です。 TypedArrayはtyped array typesの一つです。
supportedLocalesOf: ランタイムのデフォルトローケルに戻る必要なしでフォーマットしている日時でサポートしている提供されているローケルを含んでいる配列を返します。
supportedLocalesOf: ランタイムデフォルトローケルに戻る必要なしで、サポートされている提供されているローケルを含んでいる配列を返します。
supportedLocalesOf: ランタイムのデフォルトローケルに戻る必要なしで数値変換でサポートされる提供されたローケルを含んでいる配列を返します。
tanh: 引数として与えた数のハイパーボリックタンジェントを返します。すなわち
test: test() メソッドは、正規表現と指定された文字列の一致を調べるための検索を実行します。 true または false を返します。
then: then() メソッドは Promise を返します。２つの引数を持ち、それらは、 Promise が成功した場合と、失敗した場合のコールバック関数です。
throw: エラーをジェネレータにスローします。
toDateString: toDateString() メソッドは、人間が読めるアメリカ英語の表記で Date オブジェクトの「日付」部を返します。
toFixed: toFixed() メソッドは、数を固定小数点表記を用いてフォーマットします。
toGMTString: toGMTString() メソッドは、インターネットグリニッジ標準時 (GMT) 協定に基づき、日付を文字列へ変換します。toGMTString() が返す値の正確な書式は、プラットフォームやブラウザによって変化しますが、一般に、人間が読める日付の文字列を表します。
toISOString: toISOString() メソッドは、簡潔な拡張表記の ISO 形式 (ISO 8601) の文字列を返します。これは、常に 24 文字または 27 文字の長さになります (それぞれ、YYYY-MM-DDTHH:mm:ss.sssZ または ±YYYYYY-MM-DDTHH:mm:ss.sssZ)。タイムゾーンは常に 0 UTC オフセットになり、接尾辞 "Z" で表記されます。
toInteger: 渡された引数を評価しintegerに変換します。しかしこの実装は廃止されました。
toJSON: toJSON() メソッドは、Date オブジェクトを表す文字列を返します。
toLocaleDateString: toLocaleDateString() メソッドは、この Date オブジェクトの「日付」部を表す言語に依存した文字列を返します。新しい locales 引数と options 引数により、アプリケーションは、使用される書式変換の言語の指定や、関数の振る舞いのカスタマイズができます。古い実装のアプリケーションは、locales 引数と options 引数を無視します。使用されるロケールや返される文字列の書式は、完全に実装依存です。
toLocaleFormat: 非標準の toLocaleFormat() メソッドは、指定した書式を用いて日付を文字列に変換します。Intl.DateTimeFormat は、標準に準拠した方法で日付をフォーマットする代替です。Date.prototype.toLocaleDateString() の新しいバージョンも参照してください。
toLocaleLowerCase: toLocaleLowerCase() メソッドは任意のロケール固有のケースマッピングに従って、参照文字列の値を小文字に変換して返します。
toLocaleString: toLocaleString() メソッドは、配列の要素を表す文字列を返します。配列の要素は、それぞれの toLocaleString メソッドを使い、ロケール固有の文字列に変換されます（例えばカンマ “,”などはロケールによっては “.”で表されます）。
toLocaleString: toLocaleString() メソッドは、言語に合わせた日時の文字列を返します。新しい locales 引数と options 引数により、アプリケーションは、使用される書式変換の言語の指定や、関数の振る舞いのカスタマイズができます。古い実装のアプリケーションは、locales 引数と options 引数を無視します。使用されるロケールや返される文字列の書式は、完全に実装依存です。
toLocaleString: toLocaleString() メソッドは、この数値を表す言語依存の文字列を返します。
toLocaleString: toLocaleString() メソッドはオブジェクトを表す文字列を返します。このメソッドは子孫に当たるオブジェクトが現地固有性のある (locale-specific) 用途のために上書きするよう意図されています。
toLocaleTimeString: toLocaleTimeString() メソッドは、この Date オブジェクトの「時刻」部を表す言語に依存した文字列を返します。新しい locales 引数と options 引数により、アプリケーションは、使用される書式変換の言語の指定や、関数の振る舞いのカスタマイズができます。古い実装のアプリケーションは、locales 引数と options 引数を無視します。使用されるロケールや返される文字列の書式は、完全に実装依存です。
toLocaleUpperCase: toLocaleUpperCase() メソッドは任意のロケール固有のケースマッピングに従って、参照文字列の値を大文字に変換して返します。
toLowerCase: toLowerCase() メソッドは、呼び出す文字列の値を小文字に変換して返します。
toSource: toSource() はそのオブジェクトのソースコードを表す文字列を返します。
toSource: toSource() メソッドは、配列のソースコードを表す文字列を返します。
toSource: toSource() メソッドはオブジェクトのソースコードを表す文字列を返します。
toSource: toSource() メソッドは、同じエラーを評価できるコードを返します。
toSource: オブジェクトのソースコードを表す文字列を返します。
toSource: toSource() メソッドは、オブジェクトのソースコードを表す文字列を返します。
toSource: toSource() メソッドは関数のソースコードを表す文字列を返します。
toString: toString() メソッドは、指定された配列とその要素を表す文字列を返します。
toString: toString() メソッドは指定されたオブジェクトを表す文字列を返します。
toString: 特定のシンボルオブジェクトを表す文字列を返します。
toString: toString() メソッドは、指定した Error オブジェクトを表す文字列を返します。
toString: toString() メソッドは、指定した配列とその要素を表す文字列を返します。このメソッドは、Array.prototype.toString() と同じアルゴリズムを持ちます。TypedArray は TypedArray オブジェクト の一種です。
toString: toString() メソッドは、指定した Date オブジェクトを表す文字列を返します。
toString: 関数のソースコードを表す文字列を返します。
toTimeString: toTimeString() メソッドは、アメリカ英語表記の人間が読める形式で、Date オブジェクトの「時刻」部を返します。
toUTCString: toUTCString() メソッドは、協定世界時 (UTC) のタイムゾーンに基づき、日付を文字列へ変換します。
toUpperCase: toUpperCase() メソッドは、呼び出す文字列の値を大文字に変換して返します。
transfer: 静的な ArrayBuffer.transfer() メソッドは、oldBuffer のデータから得られる内容の新しい ArrayBuffer を返し、newByteLength によって切断されるかゼロ拡張されます。newByteLength が undefined なら、oldBuffer の byteLength が使われます。この操作により oldBuffer はデタッチ状態のままになります。
trim: trim() メソッドは、文字列の両端の空白を削除します。このコンテクストでの空白には、空白文字（スペースやタブ、ノーブレークスペースなど）とすべての改行文字（LF や CR など）を含みます。
trimEnd: The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method.
trunc: Math.trunc() 関数は、引数として与えた数の小数部の桁を取り除くことによって整数部を返します。
UTC: Date.UTC() メソッドは、コンストラクタと同じ最も長い書式の引数を受け入れ、協定世界時 (UTC) 1970 年 1 月 1 日 00:00:00 からの経過時間を表す Date オブジェクトのミリ秒単位の数値を返します。
unobserve: Array.unobserve()メソッドは、Array.observe() で設定された監視を削除するために使われていましたが、非推奨となりブラウザから削除されました。代わりに、一般的な Proxy オブジェクトを使用してください。
unobserve: Object.unobserve() メソッドは、Object.observe() メソッドで設定した監視の解除に使われていましたが、非推奨となりブラウザから削除されました。代わりに、一般的な Proxy オブジェクトを使用してください。
unshift: unshift() メソッドは、配列の最初に 1 つ以上の要素を追加し、新しい配列の長さを返します。
unwatch: unwatch() メソッドは、watch() メソッドでセットしたウォッチポイントを取り除きます。
valueOf: valueOf() メソッドは、Boolean オブジェクトのプリミティブ値を返します。
valueOf: valueOf() メソッドは、Date オブジェクトのプリミティブ値を返します。
valueOf: valueOf() メソッドは、指定されたオブジェクトのプリミティブな値を返します。
valueOf: valueOf() メソッドは、String オブジェクトのプリミティブ値を返します。
valueOf: Symbolオブジェクトのプリミティブ値を返します。
values: values() メソッドは、配列の各インデックスの値を含む新しい Array Iterator オブジェクトを返します。
values: Mapオブジェクトに挿入された要素を挿入順に列挙する新しい イテレーター オブジェクトを返します。
values: 挿入順でSetオブジェクト内の各要素の値を含む新しいIteratorオブジェクトを返します。
values: 配列内の各インデックスに対する値を含む新しいArray Iteratorオブジェクトを返します。
watch: watch() メソッドはプロパティに値が代入されるのを監視し、代入された際に関数を実行します。
インデックス付きコレクション: この節では、インデックス値により順序付けされたデータのコレクションを紹介します。配列、 Array オブジェクト、 TypedArray オブジェクトなどの配列用の構造体があります。
